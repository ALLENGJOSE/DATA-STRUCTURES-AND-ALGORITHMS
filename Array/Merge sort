public class Solution {

public static void divide(int[] arr,int start,int end){
	        if(start==end){
				return;
			}
			int mid=start+(end-start)/2;
			divide(arr,start,mid);//left array
			divide(arr,mid+1,end);//right array
			conquer(arr,start,mid,end);
			
		}
public static void conquer(int[] arr,int start,int mid,int end){
	int temp[]=new int[end-start+1];
	int i=start;//left array start
	int j=mid+1;//right array start
	int k=0;//temp array start
	while(i<=mid &&j<=end){
		if(arr[i]<arr[j]){
			temp[k]=arr[i];
			i++;
		}else{
			temp[k]=arr[j];
			j++;
		}
		k++;
	}
	while(i<=mid){
		temp[k++]=arr[i++];
	}
	while(j<=end){
		temp[k++]=arr[j++];
	}
	for(k=0,i=start;k<temp.length;k++,i++){
		arr[i]=temp[k];
	}
}
public static void print(int arr[]){
	for(int i=0; i<arr.length;i++){
		System.out.print(arr[i]+" ");
	}
}

	
	public static void mergeSort(int[] arr, int n) {
		// Write your code here.
		divide(arr, 0, n-1);
		
	}
}

TC:O(NLOGN)
SC:O(N)
