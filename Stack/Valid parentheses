You're given a string 'S' consisting of "{", "}", "(", ")", "[" and  "]" .
Return true if the given string 'S' is balanced, else return false.
import java.util.Stack;

public class Solution {
    public static boolean isValidParenthesis(String s) {
        // Write your code here.
        Stack<Character> stack =new Stack<Character>();
        for(char c: s.toCharArray()){
            if(c=='{'){
                stack.push('}');
            }else if(c=='['){
                stack.push(']');
            }else if(c=='('){
                stack.push(')');
            }else if(stack.isEmpty()||stack.pop()!=c){       //stack.pop()!=c:this checks whether the top element is matching or not.
                return false;
            }
        }
        return stack.isEmpty();      //if everything matched then the stack would be empty.
    }
}
TC:O(N)
SC:O(N)
