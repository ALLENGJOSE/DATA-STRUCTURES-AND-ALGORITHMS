Afzal has been working with an organization called 'Money Traders' for the past few years. The organization is into the money trading business. His manager assigned him a task. For a given array/list of stock's prices for N days, find the stock's span for each day.
The span of the stock's price today is defined as the maximum number of consecutive days(starting from today and going backwards) for which the price of the stock was less than today's price.
For example, if the price of a stock over a period of 7 days are [100, 80, 60, 70, 60, 75, 85], then the stock spans will be [1, 1, 1, 2, 1, 4, 6].

Explanation:
On the sixth day when the price of the stock was 75, the span came out to be 4, because the last 4 prices(including the current price of 75) were less than the current or the sixth day's price.

Similarly, we can deduce the remaining results.
Afzal has to return an array/list of spans corresponding to each day's stock's price. Help him to achieve the task.

Sample Input 2:
8
60 70 80 100 90 75 80 120
Sample Output 2:
1 2 3 4 1 1 2 8 

import java.util.Stack;


public class Solution {
    public static int[] findStockSpans(int []prices) {
        // Write your code here.
        Stack<Integer> s=new Stack<>();
        int n =prices.length;

        int ans[]=new int[n];
        
        s.push(0);
        ans[0]=1;

        for(int i=1;i<n;i++){
            while(!s.isEmpty() && prices[s.peek()]<prices[i]){
                s.pop();
            }
            if(s.isEmpty()){
                ans[i]=i+1;
            }else{
                ans[i]=i-s.peek();
            }
            s.push(i);
        }
        return ans;
    }
}

TC:O(N)
SC:O(N)

The time complexity of the given code is O(n), where n is the length of the input array. This is because the code iterates over the input array once, and the inner loop while loop also iterates over the input array at most once.
The space complexity of the given code is also O(n), because the code uses a stack to store the indices of the elements in the input array. The size of the stack can be at most n, when all the elements in the input array are in increasing order.
