Example Input
Input 1:

 A = [3, 2]
 B = [1, 4]
 C = 2
Input 2:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
 C = 4


Example Output
Output 1:
 [7, 6]
Output 1:
 [10, 9, 9, 8]

Basic Approach:
        public class Solution {
    public static int[] kMaxSumCombination(int []a, int []b, int n, int k){
        // Array to store all the possible sum combinations.
        ArrayList<Integer> tempArray = new ArrayList<>();

        // Loop to traverse the array 'A'.
        for (int i = 0; i < n; i++) {
            // Loop to traverse the array 'B'.
            for (int j = 0; j < n; j++) {
                int currentSum = a[i] + b[j];
                // Add the sum of the current combination.
                tempArray.add(currentSum);
            }
        }

        // Sort the array in descending order.
        Collections.sort(tempArray, Collections.reverseOrder());

        // Return the first 'K' values as an int[] array.
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = tempArray.get(i);
        }
        return result;
    }

TC:O(N^2LOG(N^2)) //For every element of an array, we are traversing all the elements of the other array. This requires (N ^ 2) time.
After that, we are sorting the array of size (N ^ 2) which requires O((N ^ 2) * log(N ^ 2)) time. Thus, the total time complexity will be O((N ^ 2) * log(N ^ 2)).
SC:O(N^2)
//Since we are using an array of size (N ^ 2) to store the sum of combinations. This is the additional space required by the algorithm. Thus, the space complexity will be O(N ^ 2). 
Optimized approach:
import java.util.*;

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, ArrayList<Integer> B, int C) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        Collections.sort(A);
        Collections.sort(B);
        
        Collections.reverse(A);
        Collections.reverse(B);
        
        for(int i=0;i<A.size();i++){
        for(int j=0;j<B.size();j++){
        int value = A.get(i)+ B.get(j);
        if(pq.size()<C){
            pq.add(value);
        }else if(pq.peek() <= value){
            pq.add(value);
        }else if(pq.peek() > value){
            break;
        }
        if(pq.size()>C){
            pq.poll();
        }
        }
        }
        ArrayList<Integer> result = new ArrayList<>();
        while(pq.size()>0){
            result.add(pq.poll());
        }
        Collections.reverse(result);
        return result;
}
}
TC:O(NLOGN)
//Since we are sorting the given arrays/lists which takes O(N * log(N)) time. Then, we are using a max-heap which, in the worst case, can contain ‘N’ elements. 
The operations on heap will require O(N * log(N)) time. The look-up in the set can be done in log(N) time. Thus, the time complexity will be O(N * log(N)). 
SC:O(N)
//Since we are using a max-heap and a set. In the worst case, the total additional space will be O(N). Thus, the space complexity will be O(N).
