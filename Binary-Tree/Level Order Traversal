public class Solution {

  public static ArrayList<Integer> getLevelOrder(BinaryTreeNode root) {
    //Your code goes here
	ArrayList<Integer> ans=new ArrayList<>();
	if(root==null){
		return ans;
	}
	Queue<BinaryTreeNode> q=new LinkedList<>();
	q.add(root);

	while(!q.isEmpty()){
		BinaryTreeNode curr=q.poll();
		ans.add(curr.val);
		if(curr.left!=null){
			q.add(curr.left);
		}
		if(curr.right!=null){
			q.add(curr.right);
		}
	}
	return ans;

  }

}
TC:O(N)
SC:O(N)

class Solution {
    public int maxDepth(TreeNode root) {
         if( root == null ){
            return 0;
        }

        LinkedList<TreeNode> queue = new LinkedList<>();
        queue.addLast(root);

        int level = 0;

        while( queue.size() > 0 ){
            int size = queue.size();

            while( size --> 0 ){
                TreeNode remNode = queue.removeFirst();
                if( remNode.left != null ){
                    queue.addLast( remNode.left );
                }
                if( remNode.right != null ){
                        queue.addLast( remNode.right );
                }
            }

            level++;
        }

        return level;
    }
}
TC:O(N)
SC:O(N)
